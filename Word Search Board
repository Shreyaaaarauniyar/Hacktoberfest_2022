int dfs(string B , vector<string> &A , int index , int i , int j)
{
    if (index == B.length()) return 1;
    int n = A.size();
    int m = A[0].length();
    // check for all adjacent
    int x = index+1;
    if (i-1>-1 && A[i-1][j]==B[index]) {
        if (dfs(B,A,x,i-1,j)) return 1;
    }
    if (i+1<n && A[i+1][j]==B[index]) {
        if (dfs(B,A,x,i+1,j)) return 1;
    }
    
    if (j-1>-1 && A[i][j-1]==B[index]) {
        if (dfs(B,A,x,i,j-1)) return 1;
    }
    if (j+1<m && A[i][j+1]==B[index]) {
        if (dfs(B,A,x,i,j+1)) return 1;
    }
    
    return 0;
}
int Solution::exist(vector<string> &A, string B) {
    int n = A.size();
    int m = A[0].length();
    
    for (int i=0 ; i<n ; i++)
    {
        for (int j=0 ; j<m ; j++)
        {
            if (A[i][j] == B[0]) {
                // run dfs
                if (dfs(B , A , 1 , i , j) == 1) return 1;
            }
        }
    }
    return 0;
}
